#!/usr/bin/env python3
"""
Script de prueba para verificar la funcionalidad de etiquetado con LLM usando OpenAI API
"""

import sys
import os

# A√±adir el directorio actual al path para importar las funciones
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from contactos_pais import query_openai_for_tags, generate_tags

def test_llm_functionality():
    """Probar la funcionalidad del LLM con casos de ejemplo"""
    print("üß™ Probando funcionalidad de etiquetado con LLM...")
    print("=" * 60)
    
    # Casos de prueba
    test_cases = [
        {
            "carreras": "Administraci√≥n de Empresas, Gerencia de Empresas (Emprendimiento)",
            "pais": "Honduras",
            "expected": "logistica internacional"
        },
        {
            "carreras": "Medicina, Enfermer√≠a, Odontolog√≠a",
            "pais": "Argentina",
            "expected": "ninguna"  # No deber√≠a asignar ninguna etiqueta
        },
        {
            "carreras": "Ingenier√≠a en Sistemas, Inform√°tica, Tecnolog√≠a de la Informaci√≥n",
            "pais": "Colombia",
            "expected": "cabinas de experimentacion"
        },
        {
            "carreras": "Administraci√≥n de Empresas, Contabilidad, Finanzas",
            "pais": "Per√∫",
            "expected": "logistica internacional"
        }
    ]
    
    print("üìã Casos de prueba:")
    for i, case in enumerate(test_cases, 1):
        print(f"{i}. Carreras: {case['carreras']}")
        print(f"   Pa√≠s: {case['pais']}")
        print(f"   Esperado: {case['expected']}")
        print()
    
    print("üöÄ Iniciando pruebas...")
    print("-" * 60)
    
    for i, case in enumerate(test_cases, 1):
        print(f"Prueba {i}:")
        print(f"Carreras: {case['carreras']}")
        print(f"Pa√≠s: {case['pais']}")
        
        # Probar la funci√≥n del LLM directamente
        llm_result = query_openai_for_tags(case['carreras'], case['pais'])
        print(f"Resultado LLM: '{llm_result}'")
        
        # Probar la funci√≥n completa de generaci√≥n de tags
        full_result = generate_tags(case['carreras'], case['pais'])
        print(f"Resultado completo: '{full_result}'")
        
        if llm_result:
            print(f"‚úÖ LLM asign√≥ etiqueta: {llm_result}")
        else:
            print(f"‚ùå LLM no pudo asignar etiqueta")
        
        print("-" * 60)

def test_openai_connection():
    """Probar la conexi√≥n con OpenAI API"""
    print("üîå Probando conexi√≥n con OpenAI API...")
    
    try:
        import openai
        
        # Verificar variables de entorno
        api_key = os.environ.get("OPENAI_API_KEY")
        base_url = os.environ.get("OPENAI_API_BASE")
        
        if not api_key:
            print("‚ùå OPENAI_API_KEY no est√° configurada")
            print("üí° Configura la variable de entorno: export OPENAI_API_KEY='tu-api-key'")
            return False
        
        if not base_url:
            print("‚ùå OPENAI_API_BASE no est√° configurada")
            print("üí° Configura la variable de entorno: export OPENAI_API_BASE='https://api.openai.com/v1'")
            return False
        
        # Crear cliente de prueba
        client = openai.OpenAI(
            api_key=api_key,
            base_url=base_url,
        )
        
        # Probar conexi√≥n con una petici√≥n simple
        completion = client.chat.completions.create(
            model="hf:mistralai/Mistral-7B-Instruct-v0.3",
            messages=[
                {"role": "user", "content": "Responde solo con 'OK'"}
            ],
            max_tokens=10,
            temperature=0
        )
        
        response = completion.choices[0].message.content.strip()
        if response:
            print(f"‚úÖ Conexi√≥n exitosa con OpenAI API")
            print(f"üì¶ Modelo: hf:mistralai/Mistral-7B-Instruct-v0.3")
            return True
        else:
            print(f"‚ùå Respuesta vac√≠a de la API")
            return False
            
    except openai.AuthenticationError:
        print("‚ùå Error de autenticaci√≥n con OpenAI API")
        print("üí° Verifica que tu API key sea correcta")
        return False
    except openai.APIError as e:
        print(f"‚ùå Error en petici√≥n a OpenAI API: {str(e)}")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {str(e)}")
        return False

def main():
    """Funci√≥n principal"""
    print("ü§ñ Pruebas de Etiquetado con LLM (OpenAI API)")
    print("=" * 60)
    
    # Verificar conexi√≥n con OpenAI API
    if not test_openai_connection():
        print("\n‚ö†Ô∏è  No se puede conectar a OpenAI API. Las pruebas de LLM fallar√°n.")
        print("üí° Para configurar OpenAI API:")
        print("   1. Obt√©n una API key de OpenAI")
        print("   2. Configura las variables de entorno:")
        print("      export OPENAI_API_KEY='tu-api-key'")
        print("      export OPENAI_API_BASE='https://api.openai.com/v1'")
        return 1
    
    print("\n" + "=" * 60)
    
    # Probar funcionalidad
    test_llm_functionality()
    
    print("\nüéØ Pruebas completadas")
    return 0

if __name__ == "__main__":
    sys.exit(main()) 